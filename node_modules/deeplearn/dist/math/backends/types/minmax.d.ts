import { NamedArrayMap } from '../../../util';
import { DataType, NDArray } from '../../ndarray';
import { KernelInputConfig, KernelNode, TapeNodeInputGradientArrays } from '../tape_types';
export interface MinNode<G extends DataType> extends KernelNode {
    inputAndArgs: MinInputConfig<G>;
    output: NDArray<G>;
    gradient: (dy: NDArray<G>, y: NDArray<G>) => MinGradientInputArrays<G>;
}
export interface MinimumNode<D extends DataType> extends KernelNode {
    inputAndArgs: MinimumInputConfig<D>;
    output: NDArray<D>;
    gradient: (dy: NDArray<D>, y: NDArray<D>) => {
        a: () => NDArray<D>;
        b: () => NDArray<D>;
    };
}
export interface MinimumInputConfig<D extends DataType> extends KernelInputConfig {
    inputs: {
        a: NDArray<D>;
        b: NDArray<D>;
    };
}
export interface MinInputConfig<G extends DataType> extends KernelInputConfig {
    inputs: MinInputArrays<G>;
}
export interface MinInputArrays<G extends DataType> extends NamedArrayMap {
    x: NDArray<G>;
}
export interface MinGradientInputArrays<G extends DataType> extends TapeNodeInputGradientArrays {
    x: () => NDArray<G>;
}
export interface MaxNode<G extends DataType> extends KernelNode {
    inputAndArgs: MaxInputConfig<G>;
    output: NDArray<G>;
    gradient: (dy: NDArray<G>, y: NDArray<G>) => MaxGradientInputArrays<G>;
}
export interface MaximumNode<D extends DataType> extends KernelNode {
    inputAndArgs: MaximumInputConfig<D>;
    output: NDArray<D>;
    gradient: (dy: NDArray<D>, y: NDArray<D>) => {
        a: () => NDArray<D>;
        b: () => NDArray<D>;
    };
}
export interface MaximumInputConfig<D extends DataType> extends KernelInputConfig {
    inputs: {
        a: NDArray<D>;
        b: NDArray<D>;
    };
}
export interface MaxInputConfig<G extends DataType> extends KernelInputConfig {
    inputs: MaxInputArrays<G>;
}
export interface MaxInputArrays<G extends DataType> extends NamedArrayMap {
    x: NDArray<G>;
}
export interface MaxGradientInputArrays<G extends DataType> extends TapeNodeInputGradientArrays {
    x: () => NDArray<G>;
}
